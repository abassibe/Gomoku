use std::mem::size_of;

const BITS_IN_U128: usize = size_of::<u128>() * 8;

pub struct BitBoard {
    b: [u128; 3]
}

impl Default for BitBoard {
    fn default() -> Self {
        Self {
            b: [0, 0, 0]
        }
    }
}

impl Shl<u32> for BitBoard {
    
}

impl BitBoard {
    pub fn new(one: u128, two: u128, three: u128) -> Self {
        Self {
            b: [one, two, three]
        }
    }

    pub fn from_array(from: [u128; 3]) -> Self { 
        Self {
            b: from
        }
    }

    pub fn compute_to_isize<F: Fn(&Self) -> isize>(&self, f: F) -> isize {
        f(self)
    }

    #[inline]
    pub fn shift_left(&self, by: usize) -> Self {
        let bits = self.b;
        let max_index = bits.len() - 1;
        let mut new_bits: [u128; 3] = [0, 0, 0];

        if by >= BITS_IN_U128 * (max_index + 1) {
            return Self::default();
        }

        let inner_lshift = by % BITS_IN_U128;
        let inner_rshift = BITS_IN_U128 - inner_lshift;
        let value_off = by / BITS_IN_U128;
        for (dest_i, src_i) in (0..=(max_index - value_off)).rev().zip((0..=max_index).rev()) {
            if src_i < max_index && inner_rshift < BITS_IN_U128 {
                new_bits[dest_i] = bits[src_i + 1] >> inner_rshift
            }
            new_bits[dest_i] |= bits[src_i] << inner_lshift;
        }

        Self {
            b: new_bits
        }
    }

    #[inline]
    pub fn shift_right(&self, by: usize) -> Self {
        let bits = self.b;
        let max_index = bits.len() - 1;
        let mut new_bits: [u128; 3] = [0, 0, 0];

        if by >= BITS_IN_U128 * (max_index + 1) {
            return Self::default();
        }

        let inner_rshift = by % BITS_IN_U128;
        let inner_lshift = BITS_IN_U128 - inner_rshift;
        let value_off = by / BITS_IN_U128;
        for (dest_i, src_i) in (value_off..=max_index).zip((0..=max_index)) {
            if src_i > usize::MIN && inner_lshift < BITS_IN_U128 {
                new_bits[dest_i] = bits[src_i - 1] << inner_lshift
            }
            new_bits[dest_i] |= bits[src_i] >> inner_rshift;
        }

        Self {
            b: new_bits
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_bitshift_left_by_4_on_bitboard() {
        // Arrange
        let original = BitBoard::from_array([
            0b11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
        ]);
        let expected = BitBoard::from_array([
            0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101,
            0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000,
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000
        ]);

        // Act
        let result = original.shift_left(4);

        // Assert
        assert_eq!(expected.b, result.b);
    }

    #[test]
    fn test_bitshift_left_by_128_on_bitboard() {
        // Arrange
        let original = BitBoard::from_array([
            0b11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
        ]);
        let expected = BitBoard::from_array([
            0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
        ]);

        // Act
        let result = original.shift_left(128);

        // Assert
        assert_eq!(expected.b, result.b);
    }

    #[test]
    fn test_bitshift_left_by_0_on_bitboard() {
        // Arrange
        let original = BitBoard::from_array([
            0b11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
        ]);

        // Act
        let result = original.shift_left(0);

        // Assert
        assert_eq!(original.b, result.b);
    }

    #[test]
    fn test_bitshift_left_by_max_minus_1_on_bitboard() {
        // Arrange
        let original = BitBoard::from_array([
            0b11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
        ]);
        let expected = BitBoard::from_array([
            0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
        ]);
        let by = (BITS_IN_U128 * 3) - 1;

        // Act
        let result = original.shift_left(by);

        // Assert
        assert_eq!(expected.b, result.b);
    }

    #[test]
    fn test_bitshift_left_by_max_on_bitboard() {
        // Arrange
        let original = BitBoard::from_array([
            0b11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
        ]);
        let expected = BitBoard::default();
        let by = BITS_IN_U128 * 3;

        // Act
        let result = original.shift_left(by);

        // Assert
        assert_eq!(expected.b, result.b);
    }

    #[test]
    fn test_bitshift_right_by_4_on_bitboard() {
        // Arrange
        let original = BitBoard::from_array([
            0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011010,
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010011
        ]);
        let expected = BitBoard::from_array([
            0b00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,
            0b10100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
        ]);

        // Act
        let result = original.shift_right(4);

        // Assert
        assert_eq!(expected.b, result.b);
    }

    #[test]
    fn test_bitshift_right_by_128_on_bitboard() {
        // Arrange
        let original = BitBoard::from_array([
            0b11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
        ]);
        let expected = BitBoard::from_array([
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
        ]);

        // Act
        let result = original.shift_right(128);

        // Assert
        assert_eq!(expected.b, result.b);
    }

    #[test]
    fn test_bitshift_right_by_0_on_bitboard() {
        // Arrange
        let original = BitBoard::from_array([
            0b11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
        ]);

        // Act
        let result = original.shift_right(0);

        // Assert
        assert_eq!(original.b, result.b);
    }

    #[test]
    fn test_bitshift_right_by_max_minus_1_on_bitboard() {
        // Arrange
        let original = BitBoard::from_array([
            0b11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
        ]);
        let expected = BitBoard::from_array([
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
        ]);
        let by = (BITS_IN_U128 * 3) - 1;

        // Act
        let result = original.shift_right(by);

        // Assert
        assert_eq!(expected.b, result.b);
    }

    #[test]
    fn test_bitshift_right_by_max_on_bitboard() {
        // Arrange
        let original = BitBoard::from_array([
            0b11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
            0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
        ]);
        let expected = BitBoard::default();
        let by = BITS_IN_U128 * 3;

        // Act
        let result = original.shift_right(by);

        // Assert
        assert_eq!(expected.b, result.b);
    }
}