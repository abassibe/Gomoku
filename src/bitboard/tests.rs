use super::*;

#[test]
fn test_bitshift_left_by_4_on_bitboard() {
    // Arrange
    let original = BitBoard::from_array([
        0b11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
    ]);
    let expected = BitBoard::from_array([
        0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101,
        0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000,
        0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000
    ]);

    // Act
    let result = original.shift_left(4);

    // Assert
    assert_eq!(expected.b, result.b);
}

#[test]
fn test_bitshift_left_by_128_on_bitboard() {
    // Arrange
    let original = BitBoard::from_array([
        0b11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
    ]);
    let expected = BitBoard::from_array([
        0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,
        0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    ]);

    // Act
    let result = original.shift_left(128);

    // Assert
    assert_eq!(expected.b, result.b);
}

#[test]
fn test_bitshift_left_by_0_on_bitboard() {
    // Arrange
    let original = BitBoard::from_array([
        0b11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
    ]);

    // Act
    let result = original.shift_left(0);

    // Assert
    assert_eq!(original.b, result.b);
}

#[test]
fn test_bitshift_left_by_max_minus_1_on_bitboard() {
    // Arrange
    let original = BitBoard::from_array([
        0b11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
    ]);
    let expected = BitBoard::from_array([
        0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    ]);
    let by = (BITS_IN_U128 * 3) - 1;

    // Act
    let result = original.shift_left(by);

    // Assert
    assert_eq!(expected.b, result.b);
}

#[test]
fn test_bitshift_left_by_max_on_bitboard() {
    // Arrange
    let original = BitBoard::from_array([
        0b11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
    ]);
    let expected = BitBoard::default();
    let by = BITS_IN_U128 * 3;

    // Act
    let result = original.shift_left(by);

    // Assert
    assert_eq!(expected.b, result.b);
}



#[test]
fn test_bitshift_right_by_4_on_bitboard() {
    // Arrange
    let original = BitBoard::from_array([
        0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,
        0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011010,
        0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010011
    ]);
    let expected = BitBoard::from_array([
        0b00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,
        0b10100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
    ]);

    // Act
    let result = original.shift_right(4);

    // Assert
    assert_eq!(expected.b, result.b);
}

#[test]
fn test_bitshift_right_by_128_on_bitboard() {
    // Arrange
    let original = BitBoard::from_array([
        0b11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
    ]);
    let expected = BitBoard::from_array([
        0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    ]);

    // Act
    let result = original.shift_right(128);

    // Assert
    assert_eq!(expected.b, result.b);
}

#[test]
fn test_bitshift_right_by_0_on_bitboard() {
    // Arrange
    let original = BitBoard::from_array([
        0b11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
    ]);

    // Act
    let result = original.shift_right(0);

    // Assert
    assert_eq!(original.b, result.b);
}

#[test]
fn test_bitshift_right_by_max_minus_1_on_bitboard() {
    // Arrange
    let original = BitBoard::from_array([
        0b11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
    ]);
    let expected = BitBoard::from_array([
        0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
    ]);
    let by = (BITS_IN_U128 * 3) - 1;

    // Act
    let result = original.shift_right(by);

    // Assert
    assert_eq!(expected.b, result.b);
}

#[test]
fn test_bitshift_right_by_max_on_bitboard() {
    // Arrange
    let original = BitBoard::from_array([
        0b11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b01011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
    ]);
    let expected = BitBoard::default();
    let by = BITS_IN_U128 * 3;

    // Act
    let result = original.shift_right(by);

    // Assert
    assert_eq!(expected.b, result.b);
}