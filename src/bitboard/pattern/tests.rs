use crate::goban::Goban;

use super::{Pattern, BitBoard};

#[test]
fn test_method_match_in_match_full_square() {
    // Arrange
    // This is a simple pattern, just a 2 by 2 square.
    let mut pattern = Pattern::from_str("
        1100000000000000000
        1100000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ", None);
    let player = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000011
        0000000000000000011
    ");
    let enemy = BitBoard::empty();
    let goban = Goban::new(player, enemy);
    let expected: Option<Vec<bool>> = Some(vec![]);
    let expected_pos = (17u8, 17u8);

    // Act
    let result = pattern.search_in_goban(&goban);
    let pos = pattern.get_pattern_coord();
    let found = pattern.is_match();

    // Assert
    assert_eq!(expected, result);
    assert_eq!(expected_pos, pos);
    assert_eq!(true, found);
}

#[test]
fn test_method_match_in_match_full_cross() {
    // Arrange
    let mut pattern = Pattern::from_str("
        0010000000000000000
        0010000000000000000
        1111100000000000000
        0010000000000000000
        0010000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ", None);
    let player = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000001000000
        0000000000001000000
        0000000000111110000
        0000000000001000000
        0000000000001000000
        0000000000000000000
        0000000000000000000
    ");
    let enemy = BitBoard::empty();
    let goban = Goban::new(player, enemy);
    let expected: Option<Vec<bool>> = Some(vec![]);
    let expected_pos = (10u8, 12u8);

    // Act
    let result = pattern.search_in_goban(&goban);
    let pos = pattern.get_pattern_coord();
    let found = pattern.is_match();

    // Assert
    assert_eq!(expected, result);
    assert_eq!(expected_pos, pos);
    assert_eq!(true, found);
}

#[test]
fn test_method_match_in_doesnt_match_partial_pattern() {
    // Arrange
    let mut pattern = Pattern::from_str("
        0010000000000000000
        0010000000000000000
        1111100000000000000
        0010000000000000000
        0010000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ", None);
    let player = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000010
        0000000000000000010
        0000000000000001111
        0000000000000000010
        0000000000000000010
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let enemy = BitBoard::empty();
    let goban = Goban::new(player, enemy);
    let expected: Option<Vec<bool>> = None;
    // This is the max pos the pattern can go at
    let expected_pos = (14u8, 14u8);

    // Act
    let result = pattern.search_in_goban(&goban);
    let pos = pattern.get_pattern_coord();
    let found = pattern.is_match();

    // Assert
    assert_eq!(expected, result);
    assert_eq!(expected_pos, pos);
    assert_eq!(false, found);
}

#[test]
fn test_method_match_in_match_full_cross_in_garbage() {
    // Arrange
    let mut pattern = Pattern::from_str("
        0010000000000000000
        0010000000000000000
        1111100000000000000
        0010000000000000000
        0010000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ", None);
    let player = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        1111100000000000000
        1111100000000000000
        1111100000000000000
        1111100000000000000
        1111100000000000000
    ");
    let enemy = BitBoard::empty();
    let goban = Goban::new(player, enemy);
    let expected: Option<Vec<bool>> = Some(vec![]);
    let expected_pos = (0u8, 14u8);

    // Act
    let result = pattern.search_in_goban(&goban);
    let pos = pattern.get_pattern_coord();
    let found = pattern.is_match();

    // Assert
    assert_eq!(expected, result);
    assert_eq!(expected_pos, pos);
    assert_eq!(true, found);
}

#[test]
fn test_method_match_in_match_pattern_with_two_part() {
    // Arrange
    let mut pattern = Pattern::from_str("
        1000000000000000000
        0100000000000000000
        0000000000000000000
        0001000000000000000
        0000100000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ", None);
    let player = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000010000
        0000000000000001000
        0000000000000000000
        0000000000000000010
        0000000000000000001
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let enemy = BitBoard::empty();
    let goban = Goban::new(player, enemy);
    let expected: Option<Vec<bool>> = Some(vec![]);
    let expected_pos = (14u8, 5u8);

    // Act
    let result = pattern.search_in_goban(&goban);
    let pos = pattern.get_pattern_coord();
    let found = pattern.is_match();

    // Assert
    assert_eq!(expected, result);
    assert_eq!(expected_pos, pos);
    assert_eq!(true, found);
}

#[test]
fn test_method_match_in_match_pattern_with_two_part_and_must_empty_bits() {
    // Arrange
    let mut pattern = Pattern::from_str("
        1000000000000000000
        0100000000000000000
        0000000000000000000
        0001000000000000000
        0000100000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ", Some(vec!["
        0000000000000000000
        0000000000000000000
        0010000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    "]));
    let player = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000010000
        0000000000000001000
        0000000000000000000
        0000000000000000010
        0000000000000000001
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let enemy = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000100
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let goban = Goban::new(player, enemy);
    let expected: Option<Vec<bool>> = Some(vec![true]);
    let expected_pos = (14u8, 5u8);

    // Act
    let result = pattern.search_in_goban(&goban);
    let pos = pattern.get_pattern_coord();
    let found = pattern.is_match();

    // Assert
    assert_eq!(expected, result);
    assert_eq!(expected_pos, pos);
    assert_eq!(true, found);
}

#[test]
fn test_method_match_in_match_pattern_with_two_part_and_must_empty_bits_in_garbage() {
    // Arrange
    let mut pattern = Pattern::from_str("
        1000000000000000000
        0100000000000000000
        0000000000000000000
        0001000000000000000
        0000100000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ", Some(vec!["
        0000000000000000000
        0000000000000000000
        0010000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    "]));
    let player = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000011111
        0000000000000011111
        0000000000000011111
        0000000000000011111
        0000000000000011111
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let enemy = BitBoard::empty();
    let goban = Goban::new(player, enemy);
    let expected: Option<Vec<bool>> = Some(vec![false]);
    let expected_pos = (14u8, 5u8);

    // Act
    let result = pattern.search_in_goban(&goban);
    let pos = pattern.get_pattern_coord();
    let found = pattern.is_match();

    // Assert
    assert_eq!(expected, result);
    assert_eq!(expected_pos, pos);
    assert_eq!(true, found);
}