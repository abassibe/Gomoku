use super::*;
use crate::{algorithm::Algorithm, goban::*};
use crate::algorithm::Algorithms;

#[test]
fn test_pattern_matching_extract_threatening_moves_from_opponent_with_open_split_four() {
    // Arrange
    let player = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000100000
        0000000000000100000
        0000000000000100000
        0000000000000000000
        0000000000000100000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let enemy = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let expected = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000100000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000100000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");

    // Act
    let result = extract_threatening_moves_from_player(enemy, player, 0, &NewPattern::new());
    println!("Here is the result:\n{}", result);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_matching_extract_threatening_moves_from_opponent_with_four() {
    // Arrange
    let player = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000000100100000
        0000000000010100000
        0000000000000100000
        0000000000000000000
        0000000001110000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let enemy = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000010000000000
        0000001000000100000
        0000000000000000000
        0000000000100000000
        0000000001001000000
        0000000001010000000
        0000000010000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let expected = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000100000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");

    // Act
    let result = extract_threatening_moves_from_player(enemy, player, 0, &NewPattern::new());
    println!("Here is the result:\n{}", result);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_index() {
    // Arrange
    let expected: [(u8, u8, bool); 15] = [
        (0b01100000, 4, true),
        (0b11000000, 3, false),
        (0b01110000, 5, true),
        (0b01101000, 6, false),
        (0b01011000, 6, false),
        (0b01111000, 6, true),
        (0b11100000, 4, false),
        (0b11010000, 5, false),
        (0b10110000, 5, false),
        (0b11110000, 5, false),
        (0b10111000, 5, false),
        (0b11011000, 5, false),
        (0b11101000, 5, false),
        (0b11101000, 5, false),
        (0b11111000, 5, true)
    ];
    let patterns = NewPattern::new();

    // Act
    let results: [(u8, u8, bool); 15] = [
        patterns[PatternName::OpenTwo],
        patterns[PatternName::CloseTwo],
        patterns[PatternName::OpenThree],
        patterns[PatternName::OpenSplitThreeRight],
        patterns[PatternName::OpenSplitThreeLeft],
        patterns[PatternName::OpenFour],
        patterns[PatternName::CloseThree],
        patterns[PatternName::CloseSplitThreeRight],
        patterns[PatternName::CloseSplitThreeLeft],
        patterns[PatternName::CloseFour],
        patterns[PatternName::SplitFourLeft],
        patterns[PatternName::SplitFourMiddle],
        patterns[PatternName::SplitFourRight],
        patterns[PatternName::CloseSplitFourRight],
        patterns[PatternName::Five]
    ];

    // Assert
    assert_eq!(expected, results);
}

#[test]
fn test_pattern_matching_contains_five_aligned() {
    // Arrange
    let one_five_aligned = BitBoard::from_str("
        0000000000000001000
        0000000000000001000
        0000000000000000000
        0000000000000011000
        0000000000000100000
        0000000000001001000
        0000000000010000000
        0000000000100000000
        0000000000000000000
        0100100010010100000
        0000000000000000000
        0000000000000100000
        0000000000001010000
        0000000000000000000
        0000001110110000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let no_five_aligned = BitBoard::from_str("
        0000000000000001000
        0000000000000001000
        0000000000000001000
        0000001000000001000
        0000000100000000000
        0000000000000001000
        0000000001000000000
        0000000000100000000
        0000000000000000000
        0100100010010100000
        0000000000000000000
        0000000000000100000
        0000000000001010000
        0000000000000000000
        0000001110110000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let two_five_aligned = BitBoard::from_str("
        0000000000000001000
        0000000000000001000
        0000000000000000000
        0000000000000011000
        0000000000000100000
        0000000000001001000
        0000000000010000000
        0000000000100000000
        0000000000000000000
        0100100010010100000
        0000000000000000000
        0000000000000100000
        0000000000001010000
        0000000000000000000
        0000001111100000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let one_six_aligned = BitBoard::from_str("
        0000000000000001000
        0000000000000001000
        0000000000000000000
        0000000000000011000
        0000000000000000000
        0000000000001001000
        0000000000010000000
        0000000000100000000
        0000000000000000000
        0100100010010100000
        0000000000000000000
        0000000000000100000
        0000000000001010000
        0000000000000000000
        0000001111110000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let one_seven_aligned = BitBoard::from_str("
        0000000000000001000
        0000000000000001000
        0000000000000000000
        0000000000000011000
        0000000000000100000
        0000000000000001000
        0000000000010000000
        0000000000100000000
        0000000000000000000
        0100100010010100000
        0000000000000000000
        0000000000000100000
        0000000000001010000
        0000000000000000000
        0000011111110000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let one_five_aligned_edge = BitBoard::from_str("
        0000000000000001000
        0000000000000001000
        0000000000000000000
        0000000000000011000
        0000000000000100000
        0000000000000001000
        0000000000010000000
        0000000000100000000
        0000000000000000000
        0100100010010100000
        0000000000000000000
        0000000000000100000
        0000000000001010000
        0000000000000000000
        0000011001100010000
        0000000000000001000
        0000000000000000100
        0000000000000000010
        0000000000000000001
    ");
    let expected = [true, false, true, true, true, true];

    // Act
    let results = [
        one_five_aligned.contains_five_aligned(),
        no_five_aligned.contains_five_aligned(),
        two_five_aligned.contains_five_aligned(),
        one_six_aligned.contains_five_aligned(),
        one_seven_aligned.contains_five_aligned(),
        one_five_aligned_edge.contains_five_aligned()
    ];

    // Assert
    assert_eq!(expected, results);
}

#[test]
fn test_pattern_matching_with_split_three() {
    // Arrange
    let (pattern, pattern_size, is_sym) = NewPattern::new()[PatternName::OpenSplitThreeLeft];
    let player = BitBoard::from_str("
        1000000100000010000
        0100000010000001000
        0010000001000000100
        0001000000000000010
        0000100000001100001
        0000010000000100000
        0000001000001000000
        0000000100001100000
        0000000010000010000
        0000000001000001000
        0010111000100000100
        0000000000010000010
        0000000000001000001
        0000001000000100000
        0000000100000010000
        0000000010000001000
        0000000000000000100
        1000000000100000010
        0100000000000000001
    ");
    let opponent = BitBoard::empty();
    let expected = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000100000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000001000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");

    // Act
    let result = match_pattern(player, opponent, pattern, pattern_size, is_sym);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_matching_with_split_four() {
    // Arrange
    let (pattern, pattern_size, is_sym) = NewPattern::new()[PatternName::SplitFourRight];
    let player = BitBoard::from_str("
        1000000100000010000
        0100000010000001000
        0010000001000000100
        0001000000001100010
        0000100000000100001
        0000010000001100000
        0000001000001000000
        0000000100001100000
        0000000010000010000
        0000000001000001000
        0010111000100000100
        0000000000010000010
        0000000000001000001
        0000001000000100000
        0000000100000010000
        0000000010000001000
        0000000000000000100
        1000000000100000010
        0100000000000000001
    ");
    let opponent = BitBoard::empty();
    let expected = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000001000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000100000
        0000000000000000000
        0000000000000000000
        0010000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000100000000
        0000000000000000000
    ");

    // Act
    let result = match_pattern(player, opponent, pattern, pattern_size, is_sym);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_matching_five_aligned() {
    // Arrange
    let (pattern, pattern_size, is_sym) = NewPattern::new()[PatternName::Five];
    let player = BitBoard::from_str("
        0000000000000001000
        0000000000000001000
        0000000000000001000
        0000001000000001000
        0000000100000000000
        0000000010000001000
        0000000001000000000
        0000000000100000000
        0000000000000000000
        0100100010010100000
        0000000000000000000
        0000000000000100000
        0000000000001010000
        0000000000000000000
        0000001110110000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let opponent = BitBoard::empty();
    let expected = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000001000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");

    // Act
    let result = match_pattern(player, opponent, pattern, pattern_size, is_sym);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_matching_isolate_five_aligned() {
    // Arrange
    let player = BitBoard::from_str("
        0000000000000001000
        0000000000000001000
        0000000000000001000
        0000001000000001000
        0000000100000000000
        0000000010000001000
        0000000001000000000
        0000000000100000000
        0000000000000000000
        0100100010010100000
        0000000000000000000
        0000000000000100000
        0000000000001010000
        0000000000000000000
        0000001110110000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let expected = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000001000000000000
        0000000100000000000
        0000000010000000000
        0000000001000000000
        0000000000100000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");

    // Act
    let result = extract_five_aligned(player);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_matching_open_three() {
    // Arrange
    let (pattern, pattern_size, is_sym) = NewPattern::new()[PatternName::OpenThree];
    let player = BitBoard::from_str("
        0000000000000001000
        0000000000000001000
        0000000000000001000
        0000001000000001000
        0000000100000000000
        0000000010000001000
        0000000001000001000
        0000000000100000100
        0000000000000000010
        0100100010010100000
        0000000000000000000
        0000000000000100000
        0000000000001010000
        0000000000000000000
        0000001110110000000
        0001010000001001000
        0010100000010010100
        0100000000000100010
        0000000000000000000
    ");
    let opponent = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000100
        0000000001000001010
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000010100000
    ");
    let expected = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000010000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000100000000000
        0000100000000010100
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");

    // Act
    let result = match_pattern(player, opponent, pattern, pattern_size, is_sym);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_matching_check_illegal_moves() {
    // Arrange
    let player = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000001000000000
        0000000110000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let opponent = BitBoard::empty();
    let expected = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let patterns = NewPattern::new();

    // Act
    let result = extract_illegal_moves(player, opponent, &patterns);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_matching_check_illegal_moves_with_no_illegal() {
    // Arrange
    let player = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000001000000000
        0000000110000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let opponent = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let expected = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let patterns = NewPattern::new();

    // Act
    let result = extract_illegal_moves(player, opponent, &patterns);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_matching_check_illegal_moves_with_split_three() {
    // Arrange
    let player = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000001000001000000
        0000000100010000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let opponent = BitBoard::empty();
    let expected = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let patterns = NewPattern::new();

    // Act
    let result = extract_illegal_moves(player, opponent, &patterns);
    println!("Here is the result:\n{}", result);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_matching_check_illegal_moves_with_merged_split_three() {
    // Arrange
    // In this case we can expect the following as being a double open three
    // but it isn't since there is 2 stones in common instead of only one
    // for a real double open three.
    // 0000000000000000000
    // 0000000000000000000
    // 0000100000000000000
    // 0000000000000000000
    // 0000001000000000000
    // 0000000100000000000
    // 0000000000000000000
    // 0000000001000000000
    // 0000000000000000000
    // 0000000000000000000
    // 0000000000000000000
    // 0000000000000000000
    // 0000000000000000000
    // 0000000000000000000
    // 0000000000000000000
    // 0000000000000000000
    // 0000000000000000000
    // 0000000000000000000
    // 0000000000000000000
    let player = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000100000000000000
        0000000000000000000
        0000001000000000000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let opponent = BitBoard::empty();
    let expected = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let patterns = NewPattern::new();

    // Act
    let result = extract_illegal_moves(player, opponent, &patterns);
    println!("Here is the result:\n{}", result);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_matching_check_illegal_moves_with_split_three_real_scene() {
    // Arrange
    let player = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000001000000000000
        0000100000100000000
        0000011000100000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let opponent = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000010000000
        0000010000000000000
        0000000000000000000
        0000000001000000000
        0000000000000000000
        0000000000000100000
        0000010000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000100000
        0000001000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let expected = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000001000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let patterns = NewPattern::new();

    // Act
    let result = extract_illegal_moves(player, opponent, &patterns);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_matching_extract_threatening_moves_from_opponent_with_open_three() {
    // Arrange
    let player = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000001000000000
        0000000110000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let opponent = BitBoard::from_str("
        0001000001110000000
        0010000000000000000
        0100000000000000000
        0000000000000000000
        0000000000000001110
        0000000000000000000
        0000000000000000000
        0000000001000000001
        1110000000000000001
        0000000000000000001
        0000000000000000000
        1000000000111000000
        1000000000000000000
        1000000000000000000
        0000000000000000000
        0001000000100001000
        0010000000100000100
        0100000000100000010
        0001110000000000000
    ");
    let expected = BitBoard::from_str("
        0000000010001000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000010001
        0000000000000000000
        0000000000000000001
        0000000000000000000
        0000000000000000000
        0000000000000000000
        1000000000000000001
        0000000001000100000
        0000000000000000000
        0000000000000000000
        1000100000100010000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        1010001000100000001
    ");
    let (pattern, pattern_size, is_sym) = NewPattern::new()[PatternName::OpenThree];

    // Act
    let result = extract_threatening_moves_from_opponent(player, opponent, pattern, pattern_size, is_sym);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_matching_extract_missing_bit_with_open_three() {
    // Arrange
    let player = BitBoard::from_str("
        0000000010011000001
        0100000010000000010
        0010000000000000000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000001000000000
        1000000110000000000
        1000000000000000000
        0000000000000000011
        0000000000000000000
        0110000000000000000
        0000000000000000001
        0000000000000000001
        0000000000000000000
        0000000000000001000
        0010000001000000100
        0100000001000000000
        0000000000000110000
    ");
    let opponent = BitBoard::empty();
    let expected = BitBoard::from_str("
        0000000000100100000
        0000000000000000000
        0000000000000000000
        0001000000000000000
        0000000001000000000
        0000000000100000000
        1000000010000000000
        0000001001000000000
        0000000100000000000
        1000000000000000000
        0000000000000000000
        0001000000000000001
        0000000000000000000
        0000000000000000000
        0000000000000010001
        0001000001000000000
        0000000000000000000
        0000000000000000010
        0000000000001001000
    ");
    let (pattern, pattern_size, is_sym) = NewPattern::new()[PatternName::OpenThree];

    // Act
    let result = extract_missing_bit(player, opponent, pattern, pattern_size, is_sym);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_matching_extract_missing_bit_with_close_three() {
    // Arrange
    let player = BitBoard::from_str("
        0000000000000100000
        0000000010000000000
        0010000000000000000
        0000000010000000100
        0000100000000000000
        0000000000000000000
        0000000000000011000
        1000000011000000000
        0000000000000000000
        0000000000000000011
        1000000000000000000
        0000000001000000000
        0000000000000000000
        0000000001000000000
        0000000000000000000
        0001000000000001000
        0000000000000000100
        0000000000000000000
        1000000000000000000
    ");
    let opponent = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000010000000000
        0000000000000000000
        0000000000000000001
        0000010000000000000
        0000000000000000000
        0000000000000010000
        0000000000000000000
        1000000000000000000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let expected = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000010
        0000001000000000000
        1000000000000000000
        0000000000000000000
        0000000001000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let (pattern, pattern_size, is_sym) = NewPattern::new()[PatternName::CloseSplitThreeLeft];

    // Act
    let result = extract_missing_bit(player, opponent, pattern, pattern_size, is_sym);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_matching_extract_captured_by_move() {
    // Arrange
    let player = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000000000000000
        0000000000000000000
        0000001001000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let player_last_move = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let opponent = BitBoard::from_str("
        0000000000000000000
        0000001100000000000
        0000000000000000000
        0000000000000100000
        0000000000000100000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000001000000000
        0000000110000000000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000010000000000
        0000100000000010000
        0000100000000001000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let expected = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000001000000000
        0000000110000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let patterns = NewPattern::new();

    // Act
    let result = extract_captured_by_move(player, opponent, player_last_move, &patterns);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_matching_extract_captured_by_move_in_edge() {
    // Arrange
    let player = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        1000000000000000000
        0000000000000000000
        0000000000000000000
        1001000000000000000
    ");
    let player_last_move = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        1000000000000000000
    ");
    let opponent = BitBoard::from_str("
        0000000000000000000
        0000001100000000000
        0000000000000000000
        0000000000000100000
        0000000000000100000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000001000000000
        0000000110000000000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000010000000000
        0000100000000010000
        0000100000000001000
        1000000000000000000
        1000000000000000000
        0110000000000000000
    ");
    let expected = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        1000000000000000000
        1000000000000000000
        0110000000000000000
    ");
    let patterns = NewPattern::new();

    // Act
    let result = extract_captured_by_move(player, opponent, player_last_move, &patterns);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_matching_extract_winning_move_capture_with_3_captures() {
    // Arrange
    let player = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        1000000000000000000
        0000000000000000100
        0000000000000000000
        0001000000000000000
    ");
    let opponent = BitBoard::from_str("
        0000000000000000000
        0000001100000000000
        0000000000000000000
        0000000000000100000
        0000000000000100000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000001000000000
        0000000110000000000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000010000000000
        0000100000000010000
        0000100000000001000
        1000000000000000000
        1000000000000000000
        0110000000000000000
    ");
    let expected = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        1000000000000000000
    ");
    let patterns = NewPattern::new();

    // Act
    let result = extract_winning_move_capture(player, opponent, 3, &patterns);
    println!("Here is the result:\n{}", result);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_matching_extract_winning_move_capture_with_4_captures() {
    // Arrange
    let player = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        1000000000000000000
        0000000000000000100
        0000000000000000000
        0001000000000000000
    ");
    let opponent = BitBoard::from_str("
        0000000000000000000
        0000001100000000000
        0000000000000000000
        0000000000000100000
        0000000000000100000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000001000000000
        0000000110000000000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000010000000000
        0000100000000010000
        0000100000000001000
        1000000000000000000
        1000000000000000000
        0110000000000000000
    ");
    let expected = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000100000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        1000000000000000000
    ");
    let patterns = NewPattern::new();

    // Act
    let result = extract_winning_move_capture(player, opponent, 4, &patterns);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_matching_extract_five_align_breaking_moves() {
    // Arrange
    let player = BitBoard::from_str("
        0000100000000000000
        0001100000000000000
        0010000000000100000
        0100000000000100000
        1000000000000100000
        0000000000001100000
        0000000000000100000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000001000000000000
        0000000100000000010
        0000000010000000100
        0000000000000000100
        0001100000001000100
        0001000111111000100
        0010000000000000100
        0000000000000000000
        1000000000000000000
    ");
    let opponent = BitBoard::from_str("
        0000000000000000000
        0000010000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000010000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000001
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000010000000000000
        0000000000000000000
        0000000000001000000
        0000000000000000000
        0000000000000000000
    ");
    let expected = BitBoard::from_str("
        0000000000000000000
        0010000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000010000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000001001000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let patterns = NewPattern::new();

    // Act
    let result = extract_five_align_breaking_moves(opponent, player, &patterns);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_matching_extract_missing_bit_cross_four_with_four() {
    // Arrange
    let player = BitBoard::from_str("
        0000000000000000000
        0000000100000000000
        0000000010000000000
        0000011110000000000
        0000000000100000000
        0000000000000000000
        0000000010000000000
        0000000010000000000
        0000000010000000000
        0000011101000000100
        0000000010000001000
        0000000000000010000
        0000000000000000000
        0000000011100000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let opponent = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000001000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let expected = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000001000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000010000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");

    // Act
    let result = extract_missing_bit_cross_four_with_four(player, opponent);

    // Assert
    assert_eq!(expected, result);
}

#[test]
fn test_pattern_matching_extract_missing_bit_cross_three_with_four() {
    // Arrange
    let player = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000001000000000000
        0000000100000000000
        0000000101100000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000010000000000
        0000000100000000000
        0000000000000000000
        0000001000000000000
        0000001000000000000
        0000001000000000000
        0000000000000000000
        0000000000000000000
    ");
    let opponent = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000001000010000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");
    let expected = BitBoard::from_str("
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000001000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
        0000000000000000000
    ");

    // Act
    let result = extract_missing_bit_cross_three_with_four(player, opponent);

    // Assert
    assert_eq!(expected, result);
}

// #[test]
// fn test_pattern_matching_extract_winning_move_align_with_breakable_alignment() {
//     // Arrange
//     let player = BitBoard::from_str("
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         1000000000000000000
//         0000000000000000100
//         0000000000000000000
//         0001000000000000000
//     ");
//     let opponent = BitBoard::from_str("
//         0000000000000000000
//         0000001100000000000
//         0000000000000000000
//         0000000000000100000
//         0000000000000100000
//         0000000000000000000
//         0000000000000000000
//         0000000001000000000
//         0000000001000000000
//         0000000110000000000
//         0000000000000000000
//         0000000000000000000
//         0000000001000000000
//         0000000010000000000
//         0000100000000010000
//         0000100000000001000
//         1000000000000000000
//         1000000000000000000
//         0110000000000000000
//     ");
//     let expected = BitBoard::from_str("
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000100000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         1000000000000000000
//     ");
//     let patterns = NewPattern::new();

//     // Act
//     let result = extract_winning_move_capture(player, opponent, 4, &patterns);

//     // Assert
//     assert_eq!(expected, result);
// }

// #[test]
// fn test_pattern_matching_extract_winning_move_align_with_unbreakable_alignment() {
//     // Arrange
//     let player = BitBoard::from_str("
//         0000100000000000000
//         0000000000000000000
//         0010000000000000000
//         0100000000000100000
//         1000000000000100000
//         0000000000000100000
//         0000000000000100000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000001000000000000
//         0000000100000000000
//         0000000010000000100
//         0000000000000000100
//         0000100000000000100
//         0001000110110000000
//         0010000000000000100
//         0000000000000000000
//         1000000000000000000
//     ");
//     let opponent = BitBoard::from_str("
//         0000000000000000000
//         0000000000000000000
//         0000000000000100000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000001000001000100
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//     ");
//     let expected = BitBoard::from_str("
//         0000000000000000000
//         0001000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000100000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000000000000000
//         0000000001000000000
//         0000000000000000000
//         0100000000000000000
//         0000000000000000000
//     ");
//     let patterns = NewPattern::new();
//     let illegals = extract_illegal_moves(player, opponent, &patterns);

//     // Act
//     let result = extract_winning_move_align(player, opponent, illegals, 1, &patterns);
//     println!("Here is the result:\n{}", result);

//     // Assert
//     assert_eq!(expected, result);
// }